{"componentChunkName":"component---src-templates-github-js","path":"/projects/react-micron/","result":{"data":{"site":{"siteMetadata":{"exclude":[["discord-jam-2","DOGE: BOIS"],["woofers3d","Woofers 3D"],["ludum-dare-44","ALIEN, e x p a n s i o n ."],["react-pico-8","React PICO-8"],["react-yat","React YAT"],["opengraph-api"],["org-invoice-template"],["react-ludum-dare"],["woofers.github.io"],["kangaroo-country"],["chess"],["resume"],["java-formatter"],["battlesnake-2018"],["battlesnake-java-template"],["libgdx-tools-installer"],["challenger-deep-rofi"],["dotfiles"],["k9-krew"],["course-codes-bugs"],["noto-emoji-react"],["react-chameleon-theme-color"],["qmk-indicator"],["quefrency-case"]]}},"repositories":{"name":"react-micron","description":"🏎️ 💥 Microinteractions for React using micron.js","url":"https://github.com/woofers/react-micron","homepage":"","stars":{"totalCount":0},"license":{"name":"MIT License"},"topics":{"nodes":[]},"readme":{"text":"\n\n# React Micron\n\n[![img](https://github.com/woofers/react-micron/workflows/build/badge.svg)](https://github.com/woofers/react-micron/actions) [![img](https://david-dm.org/woofers/react-micron.svg)](https://www.npmjs.com/package/react-micron) [![img](https://badge.fury.io/js/react-micron.svg)](https://www.npmjs.com/package/react-micron) [![img](https://img.shields.io/npm/dt/react-micron.svg)](https://www.npmjs.com/package/react-micron) [![img](https://img.shields.io/npm/l/react-micron.svg)](https://github.com/woofers/react-micron/blob/master/LICENSE)\n\nMicrointeractions for React using [micron.js](https://webkul.github.io/micron/).\n\n\n# Why?\n\nFrom [Ondřej Dostál](https://www.toptal.com/designers/product-design/microinteractions-better-ux):\n\n> Microinteractions are single interactive moments in a product\n> that enhance the workflow and increase ease of use.\n\nTypically this is by way of subtle visual effects that are triggered to provide user feedback.\n\nThis can be done for a variety of reasons:\n\n-   To provide feedback before triggering an action\n-   To draw a users attention to a particular element\n-   To hint that an action was successful\n-   To indicate that an action failed\n-   To make applications feel more responsive and rewarding to use.\n\n`react-micron` helps achieve this by providing easy-to-use components\nwhich correspond to micro-actions that can be easily triggered by a user-interaction.\n\n\n# Installation\n\n**Yarn**\n\n    yarn add react-micron\n\n**npm**\n\n    npm install react-micron\n\n\n# Usage\n\n```jsx\nimport React from 'react'\nimport { Bounce } from 'react-micron'\n\nconst App = () => (\n  <Bounce>\n    <button>Click me!</button>\n  </Bounce>\n)\n\nexport default App\n```\n\nSimply add the component to the React application using JSX.\n\nThe following example shows the default props set explicitly.\n\n```jsx\nimport React from 'react'\nimport { Blink,\n         Bounce,\n         Fade,\n         Flicker,\n         Groove,\n         Jelly,\n         Jerk,\n         Pop,\n         Shake,\n         Squeeze,\n         Swing,\n         Tada } from 'react-micron'\n\nconst App = () => (\n  <Bounce\n    events=\"onClick\"\n    timing=\"ease-in-out\"\n    duration={0.45}\n    inline={false}\n  >\n    <button>Click me!</button>\n  </Bounce>\n)\n\nexport default App\n```\n\n\n## Props\n\n\n### Children\n\nThe elements to bind the microinteraction to.\n\nIn most cases this should be regular children elements passed as a React node.\n\nHowever it can also be a render prop which can accept up to 2 arguments:\n\n-   `interaction`: Function which invokes the microinteraction.\n-   `micron`: Method to access the micron API directly.\n\n\n### Events\n\n`events` indicates what event handlers are used to trigger the microinteraction.  **Default:** `onClick`\n\nThis can be a string or an array of strings to call the microinteraction on multiple events.\n\nTo disable any implicit event handling by `react-micron`, an empty array or object can be passed.\n\nAlternatively, an object can be passed to explicitly set each event handler using curried functions.\n\nAn example of this is as follows:\n\n```js\n{\n  onClick: (interaction, micron) => () => interaction(),\n  onMouseOver: (interaction, micron) => event => {\n    console.log(event)\n    micron().interaction('bounce').duration(2).timing('linear')\n  }\n}\n```\n\nBy using a curried function the original arguments from the event handler can be used, along with the injected `react-micron` functions.\n\n\n### Timing\n\n`timing` controls the easing of the microinteraction.  **Default:** `ease-in-out`\n\nMust be one of `linear`, `ease-in`, `ease-out` or `ease-in-out`.\n\n\n### Duration\n\n`duration` is the duration in seconds of the microinteraction.  **Default:** `0.45`\n\n\n### Inline\n\n`inline` controls what element the microinteraction is enclosed in. **Default:** `false`\n\nIf set a `span` is used to wrap the elements.  Otherwise a `div` is used.\n\n\n## Advanced Usage\n\nFor more complex usage, using a render prop is recommended.\n\nThis allows the interaction to be triggered manually, and the micron API to be accessed directly.\n\n```jsx\nimport React from 'react'\nimport { Blink,\n         Bounce,\n         Fade,\n         Flicker,\n         Groove,\n         Jelly,\n         Jerk,\n         Pop,\n         Shake,\n         Squeeze,\n         Swing,\n         Tada } from 'react-micron'\n\nconst App = () => (\n  <Bounce events={[]} duration={0.1} timing=\"ease-in\">\n    {(interaction, micron) => (\n      <button\n        onClick={interaction}\n        onMouseOver={() =>\n          micron().interaction('bounce').duration(2).timing('linear')\n        }\n      >\n        Click me!\n      </button>\n    )}\n  </Bounce>\n)\n\nexport default App\n```\n\nOr equivalently using the corresponding HOC\n\n```jsx\nimport React from 'react'\nimport { withBlink,\n         withBounce,\n         withFade,\n         withFlicker,\n         withGroove,\n         withJelly,\n         withJerk,\n         withPop,\n         withShake,\n         withSqueeze,\n         withSwing,\n         withTada } from 'react-micron'\n\nconst App = ({ interaction, micron }) => (\n  <button\n    onClick={interaction}\n    onMouseOver={() =>\n      micron().interaction('bounce').duration(2).timing('linear')\n    }\n  >\n    Click me!\n  </button>\n)\n\nexport default withBounce(App, {\n  events: [],\n  timing: 'ease-in',\n  duration: 0.1\n})\n```\n\nIn the above 2 examples setting `events` to an empty array disables any of the interaction\ndone by `react-micron`.  This can then be triggered by using the `interaction` callback or using the `micron` API directly.\n\nThis allows animations of different speeds or timing to be triggered depending on how the interaction is triggered.\n\n\n## Custom Interactions\n\nCustom interactions can be defined by using the `Custom` component.\n\nThis can be done by adding a CSS class `mjs-<type>` where `type` is some string identifier for the interaction,\npassed to the component as a prop.\n\nThis can be done via regular CSS imports however in this example CSS-in-JS will be used with [Emotion](https://emotion.sh/):\n\n```jsx\n/** @jsx jsx */\nimport React from 'react'\nimport { Custom } from 'react-micron'\nimport { Global, css, keyframes, jsx } from '@emotion/react'\n\nconst shiftAnimation = keyframes`\n  0% {\n    transform: translate3d(0, 0, 0);\n  }\n  50% {\n    transform: translate3d(10px, -5px, 0);\n  }\n  60% {\n    transform: translate3d(5px, -2.5px, 0);\n  }\n  80% {\n    transform: translate3d(2px, -1.25px, 0);\n  }\n  100% {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst style = css`\n .mjs-shift {\n    animation: ${shiftAnimation};\n }\n`\n\nconst Shift = props => (\n  <>\n    <Global styles={style} />\n    <Custom {...props} type=\"shift\" />\n  </>\n)\n\nexport default Shift\n```\n"},"readmeOrg":{"text":"\n#+TITLE:    React Micron\n#+AUTHOR:\tJaxson Van Doorn\n#+EMAIL:\tjaxson.vandoorn@gmail.com\n#+OPTIONS:  num:nil toc:nil\n\n* React Micron\n\n[[https://github.com/woofers/react-yat/actions][https://github.com/woofers/react-micron/workflows/build/badge.svg]] [[https://www.npmjs.com/package/react-yat][https://david-dm.org/woofers/react-micron.svg]] [[https://www.npmjs.com/package/react-yat][https://badge.fury.io/js/react-micron.svg]] [[https://www.npmjs.com/package/react-yat][https://img.shields.io/npm/dt/react-micron.svg]] [[https://github.com/woofers/react-yat/blob/master/LICENSE][https://img.shields.io/npm/l/react-micron.svg]]\n\nMicrointeractions for React using [[https://webkul.github.io/micron/][micron.js]].\n* Why?\n\nFrom [[https://www.toptal.com/designers/product-design/microinteractions-better-ux][Ondřej Dostál]]:\n\n#+BEGIN_QUOTE\nMicrointeractions are single interactive moments in a product\nthat enhance the workflow and increase ease of use.\n#+END_QUOTE\n\nTypically this is by way of subtle visual effects that are triggered to provide user feedback.\n\nThis can be done for a variety of reasons:\n\n- To provide feedback before triggering an action\n- To draw a users attention to a particular element\n- To hint that an action was successful\n- To indicate that an action failed\n- To make applications feel more responsive and rewarding to use.\n\n~react-micron~ helps achieve this by providing easy-to-use components\nwhich correspond to micro-actions that can be easily triggered by a user-interaction.\n\n* Installation\n\n*Yarn*\n#+BEGIN_SRC\nyarn add react-micron\n#+END_SRC\n\n*npm*\n#+BEGIN_SRC\nnpm install react-micron\n#+END_SRC\n\n* Usage\n\n#+BEGIN_SRC js\nimport React from 'react'\nimport { Bounce } from 'react-micron'\n\nconst App = () => (\n  <Bounce>\n    <button>Click me!</button>\n  </Bounce>\n)\n\nexport default App\n#+END_SRC\n\nSimply add the component to the React application using JSX.\n\nThe following example shows the default props set explicitly.\n\n#+BEGIN_SRC js\nimport React from 'react'\nimport { Blink,\n         Bounce,\n         Fade,\n         Flicker,\n         Groove,\n         Jelly,\n         Jerk,\n         Pop,\n         Shake,\n         Squeeze,\n         Swing,\n         Tada } from 'react-micron'\n\nconst App = () => (\n  <Bounce\n    events=\"onClick\"\n    timing=\"ease-in-out\"\n    duration={0.45}\n    inline={false}\n  >\n    <button>Click me!</button>\n  </Bounce>\n)\n\nexport default App\n#+END_SRC\n\n** Props\n*** Children\nThe elements to bind the microinteraction to.\n\nIn most cases this should be regular children elements passed as a React node.\n\nHowever it can also be a render prop which can accept up to 2 arguments:\n\n- ~interaction~: Function which invokes the microinteraction.\n- ~micron~: Method to access the micron API directly.\n\n*** Events\n\n~events~ indicates what event handlers are used to trigger the microinteraction.  *Default:* ~onClick~\n\nThis can be a string or an array of strings to call the microinteraction on multiple events.\n\nTo disable any implicit event handling by ~react-micron~, an empty array or object can be passed.\n\nAlternatively, an object can be passed to explicitly set each event handler using curried functions.\n\nAn example of this is as follows:\n\n#+BEGIN_SRC js\n{\n  onClick: (interaction, micron) => () => interaction(),\n  onMouseOver: (interaction, micron) => event => {\n    console.log(event)\n    micron().interaction('bounce').duration(2).timing('linear')\n  }\n}\n#+END_SRC\n\nBy using a curried function the original arguments from the event handler can be used, along with the injected ~react-micron~ functions.\n\n*** Timing\n\n~timing~ controls the easing of the microinteraction.  *Default:* ~ease-in-out~\n\nMust be one of ~linear~, ~ease-in~, ~ease-out~ or ~ease-in-out~.\n\n*** Duration\n\n~duration~ is the duration in seconds of the microinteraction.  *Default:* ~0.45~\n\n*** Inline\n\n~inline~ controls what element the microinteraction is enclosed in. *Default:* ~false~\n\nIf set a ~span~ is used to wrap the elements.  Otherwise a ~div~ is used.\n\n** Advanced Usage\n\nFor more complex usage, using a render prop is recommended.\n\nThis allows the interaction to be triggered manually, and the micron API to be accessed directly.\n\n#+BEGIN_SRC js\nimport React from 'react'\nimport { Blink,\n         Bounce,\n         Fade,\n         Flicker,\n         Groove,\n         Jelly,\n         Jerk,\n         Pop,\n         Shake,\n         Squeeze,\n         Swing,\n         Tada } from 'react-micron'\n\nconst App = () => (\n  <Bounce events={[]} duration={0.1} timing=\"ease-in\">\n    {(interaction, micron) => (\n      <button\n        onClick={interaction}\n        onMouseOver={() =>\n          micron().interaction('bounce').duration(2).timing('linear')\n        }\n      >\n        Click me!\n      </button>\n    )}\n  </Bounce>\n)\n\nexport default App\n#+END_SRC\n\nOr equivalently using the corresponding HOC\n\n#+BEGIN_SRC js\nimport React from 'react'\nimport { withBlink,\n         withBounce,\n         withFade,\n         withFlicker,\n         withGroove,\n         withJelly,\n         withJerk,\n         withPop,\n         withShake,\n         withSqueeze,\n         withSwing,\n         withTada } from 'react-micron'\n\nconst App = ({ interaction, micron }) => (\n  <button\n    onClick={interaction}\n    onMouseOver={() =>\n      micron().interaction('bounce').duration(2).timing('linear')\n    }\n  >\n    Click me!\n  </button>\n)\n\nexport default withBounce(App, {\n  events: [],\n  timing: 'ease-in',\n  duration: 0.1\n})\n#+END_SRC\n\nIn the above 2 examples setting ~events~ to an empty array disables any of the interaction\ndone by ~react-micron~.  This can then be triggered by using the ~interaction~ callback or using the ~micron~ API directly.\n\nThis allows animations of different speeds or timing to be triggered depending on how the interaction is triggered.\n** Custom Interactions\n\nCustom interactions can be defined by using the ~Custom~ component.\n\nThis can be done by adding a CSS class ~mjs-<type>~ where ~type~ is some string identifier for the interaction,\npassed to the component as a prop.\n\nThis can be done via regular CSS imports however in this example CSS-in-JS will be used with [[https://emotion.sh/][Emotion]]:\n\n#+BEGIN_SRC js\n/** @jsx jsx */\nimport React from 'react'\nimport { Custom } from 'react-micron'\nimport { Global, css, keyframes, jsx } from '@emotion/react'\n\nconst shiftAnimation = keyframes`\n  0% {\n    transform: translate3d(0, 0, 0);\n  }\n  50% {\n    transform: translate3d(10px, -5px, 0);\n  }\n  60% {\n    transform: translate3d(5px, -2.5px, 0);\n  }\n  80% {\n    transform: translate3d(2px, -1.25px, 0);\n  }\n  100% {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst style = css`\n .mjs-shift {\n    animation: ${shiftAnimation};\n }\n`\n\nconst Shift = props => (\n  <>\n    <Global styles={style} />\n    <Custom {...props} type=\"shift\" />\n  </>\n)\n\nexport default Shift\n#+END_SRC\n"}}},"pageContext":{"repo":"react-micron"}},"staticQueryHashes":["2033956373","3784074786"]}