{"componentChunkName":"component---src-templates-github-js","path":"/projects/react-dialog-polyfill/","result":{"data":{"site":{"siteMetadata":{"exclude":[["discord-jam-2","DOGE: BOIS"],["woofers3d","Woofers 3D"],["ludum-dare-44","ALIEN, e x p a n s i o n ."],["react-pico-8","React PICO-8"],["react-yat","React YAT"],["opengraph-api"],["org-invoice-template"],["react-ludum-dare"],["woofers.github.io"],["kangaroo-country"],["chess"],["resume"],["java-formatter"],["battlesnake-2018"],["battlesnake-java-template"],["libgdx-tools-installer"],["challenger-deep-rofi"],["dotfiles"],["k9-krew"],["course-codes-bugs"],["react-chameleon-theme-color"]]}},"repositories":{"name":"react-dialog-polyfill","description":"üñ±Ô∏è üí¨ <dialog> element bundled with polyfill for React","url":"https://github.com/woofers/react-dialog-polyfill","homepage":"","stars":{"totalCount":0},"license":{"name":"MIT License"},"topics":{"nodes":[]},"readme":{"text":"\n\n# React Dialog Polyfill\n\n[![img](https://github.com/woofers/react-dialog-polyfill/workflows/build/badge.svg)](https://github.com/woofers/react-dialog-polyfill/actions) [![img](https://david-dm.org/woofers/react-dialog-polyfill.svg)](https://www.npmjs.com/package/react-dialog-polyfill) [![img](https://badge.fury.io/js/react-dialog-polyfill.svg)](https://www.npmjs.com/package/react-dialog-polyfill) [![img](https://img.shields.io/npm/dt/react-dialog-polyfill.svg)](https://www.npmjs.com/package/react-dialog-polyfill) [![img](https://img.shields.io/npm/l/react-dialog-polyfill.svg)](https://github.com/woofers/react-dialog-polyfill/blob/master/LICENSE)\n\n`<dialog>` element bundled with polyfill for React\n\n\n# Why?\n\nWhile many other more feature-rich React modal components exists, `react-dialog-polyfill`\naims to be a simple binding of the native `<dialog>` element for React.\n\nDifferences from most of the existing components:\n\n-   Native browser support in browsers like Chrome and Opera\n-   Polyfill for un-supported browsers\n-   Avoids using `React.createPortal`, allowing SSR in natively supported browsers\n-   Dialog always will display in-front of other elements regardless of `z-index`\n-   Selected info from dialog can be returned via `<form>` element\n-   Well suited for Electron apps\n\n\n# Installation\n\n**Yarn**\n\n    yarn add react-dialog-polyfill\n\n**npm**\n\n    npm install react-dialog-polyfill\n\n\n# Usage\n\n```jsx\nimport React, { useState } from 'react'\nimport { Modal, Dialog } from 'react-dialog-polyfill'\n\nconst App = () => {\n  const [dialog, setDialog] = useState(true)\n  const [modal, setModal] = useState(true)\n  return (\n    <div>\n      <Dialog open={dialog} onClose={(e, dialog) => alert('You closed the dialog')}>\n        <div>This is a dialog. Click \"Close\".</div>\n        <button onClick={() => setDialog(false)}>Close</button>\n      </Dialog>\n      <Modal open={modal}\n        onCancel={(e, dialog) => {\n          setModal(false)\n          alert('You canceled the modal')\n        }}\n        onClose={(e, dialog) => {\n          setModal(false)\n          const value = dialog.returnValue\n          if (value) alert(`You answered \"${dialog.returnValue}\" to the modal`)\n        }}\n      >\n        <form method=\"dialog\">\n          <div>\n            This is a modal.\n            Press <pre style={{ display: 'inline-block' }}>Escape</pre> to cancel.\n          </div>\n          <div>Do you like modals?</div>\n          <button type=\"submit\" value=\"no\">No</button>\n          <button type=\"submit\" value=\"yes\" autoFocus>Yes</button>\n        </form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default App\n```\n\nSimply add the desired component to the React application using JSX.\n\nThe Modal component will block interaction with other elements when it is open, while the Dialog component will not.\n\n\n## Props\n\n\n### Open\n\n`open` indicates if the modal is open. **Default:** `false`\n\n\n### On Close\n\n`onClose` runs when the modal is explicitly closed. **Default:** `(event, modal) => {}`\n\nThat is the `open` prop state is toggled from `true` to `false`.\n\nThis means that having `onCancel={() => setModal(false)}` will call `onClose` from within `onCancel`.\n\n\n### On Cancel (Modal Only)\n\n`onCancel` runs when the modal is canceled using `Escape`. **Default:** `(event, modal) => {}`\n\nBy default the modal itself will not close as `open` will still be set however the event will trigger.\n\nIt is recommended to set `onCancel={() => setModal(false)}` to have the modal close when `Escape` is pressed.\n"},"readmeOrg":{"text":"\n#+TITLE:    React Dialog Ployfill\n#+AUTHOR:\tJaxson Van Doorn\n#+EMAIL:\tjaxson.vandoorn@gmail.com\n#+OPTIONS:  num:nil toc:nil\n\n* React Dialog Polyfill\n\n[[https://github.com/woofers/react-dialog-polyfill/actions][https://github.com/woofers/react-dialog-polyfill/workflows/build/badge.svg]] [[https://www.npmjs.com/package/react-dialog-polyfill][https://david-dm.org/woofers/react-dialog-polyfill.svg]] [[https://www.npmjs.com/package/react-dialog-polyfill][https://badge.fury.io/js/react-dialog-polyfill.svg]] [[https://www.npmjs.com/package/react-dialog-polyfill][https://img.shields.io/npm/dt/react-dialog-polyfill.svg]] [[https://github.com/woofers/react-dialog-polyfill/blob/master/LICENSE][https://img.shields.io/npm/l/react-dialog-polyfill.svg]]\n\n~<dialog>~ element bundled with polyfill for React\n\n* Why?\n\nWhile many other more feature-rich React modal components exists, ~react-dialog-polyfill~\naims to be a simple binding of the native ~<dialog>~ element for React.\n\nDifferences from most of the existing components:\n\n- Native browser support in browsers like Chrome and Opera\n- Polyfill for un-supported browsers\n- Avoids using ~React.createPortal~, allowing SSR in natively supported browsers\n- Dialog always will display in-front of other elements regardless of ~z-index~\n- Selected info from dialog can be returned via ~<form>~ element\n- Well suited for Electron apps\n\n* Installation\n\n*Yarn*\n#+BEGIN_SRC\nyarn add react-dialog-polyfill\n#+END_SRC\n\n*npm*\n#+BEGIN_SRC\nnpm install react-dialog-polyfill\n#+END_SRC\n\n* Usage\n\n#+BEGIN_SRC js\nimport React, { useState } from 'react'\nimport { Modal, Dialog } from 'react-dialog-polyfill'\n\nconst App = () => {\n  const [dialog, setDialog] = useState(true)\n  const [modal, setModal] = useState(true)\n  return (\n    <div>\n      <Dialog open={dialog} onClose={(e, dialog) => alert('You closed the dialog')}>\n        <div>This is a dialog. Click \"Close\".</div>\n        <button onClick={() => setDialog(false)}>Close</button>\n      </Dialog>\n      <Modal open={modal}\n        onCancel={(e, dialog) => {\n          setModal(false)\n          alert('You canceled the modal')\n        }}\n        onClose={(e, dialog) => {\n          setModal(false)\n          const value = dialog.returnValue\n          if (value) alert(`You answered \"${dialog.returnValue}\" to the modal`)\n        }}\n      >\n        <form method=\"dialog\">\n          <div>\n            This is a modal.\n            Press <pre style={{ display: 'inline-block' }}>Escape</pre> to cancel.\n          </div>\n          <div>Do you like modals?</div>\n          <button type=\"submit\" value=\"no\">No</button>\n          <button type=\"submit\" value=\"yes\" autoFocus>Yes</button>\n        </form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default App\n#+END_SRC\n\nSimply add the desired component to the React application using JSX.\n\nThe Modal component will block interaction with other elements when it is open, while the Dialog component will not.\n\n** Props\n*** Open\n~open~ indicates if the modal is open. *Default:* ~false~\n*** On Close\n~onClose~ runs when the modal is explicitly closed. *Default:* ~(event, modal) => {}~\n\nThat is the ~open~ prop state is toggled from ~true~ to ~false~.\n\nThis means that having ~onCancel={() => setModal(false)}~ will call ~onClose~ from within ~onCancel~.\n*** On Cancel (Modal Only)\n\n~onCancel~ runs when the modal is canceled using ~Escape~. *Default:* ~(event, modal) => {}~\n\nBy default the modal itself will not close as ~open~ will still be set however the event will trigger.\n\nIt is recommended to set ~onCancel={() => setModal(false)}~ to have the modal close when ~Escape~ is pressed.\n"}}},"pageContext":{"repo":"react-dialog-polyfill"}}}