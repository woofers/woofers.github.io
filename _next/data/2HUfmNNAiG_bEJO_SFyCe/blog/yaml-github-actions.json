{"pageProps":{"post":{"meta":{"layout":"post","title":"NPM package deployment using YAML GitHub Actions","date":"Wed, 21 Aug 2019 00:00:00 GMT"},"content":"---\nlayout: post\ntitle: NPM package deployment using YAML GitHub Actions\ndate: 2019-08-21\n---\n\n# NPM package deployment using YAML GitHub Actions\n\nRecently [GitHub](http://github.com) announced that [GitHub Actions](https://github.com/features/actions) will be [moving away](https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/) from the original [HCL](https://github.com/hashicorp/hcl) syntax in-favour of a [YAML](https://yaml.org/) format\nsimilar to [Travis CI](https://travis-ci.org/) and [Bitbucket Pipelines](https://bitbucket.org/product/features/pipelines).  This means that [HCL](https://github.com/hashicorp/hcl) style actions will no longer work [after September 30, 2019](https://developer.github.com/actions/).  It is possible to migrate using a [migration script](https://help.github.com/en/articles/migrating-github-actions-from-hcl-syntax-to-yaml-syntax) however in-some cases it may be required to reconfigure.\n\nThis particular issue occurred to me as actions which return a neutral result seem to fail the whole build with the [YAML](https://yaml.org/) format.  This means that using [actions/bin/filter](https://github.com/actions/bin/tree/master/filter/bin) to trigger a deploy would fail the build unless a release tag was found.  With this in mind, reconfiguring my [GitHub Actions](https://github.com/features/actions) seemed like the best choice.\n\n\n<a id=\"orgb58448b\"></a>\n\n## Desired Behaviour\n\nMy particular use of [GitHub Actions](https://github.com/features/actions) is for deploying my small [NPM packages](https://docs.npmjs.com/creating-node-js-modules).\n\nTo keep it simple I wanted the following to occur:\n\n-   Install dependencies, Build and Test package on each commit\n-   Publish package if a release tag was created\n\n\n<a id=\"org521573d\"></a>\n\n## Creating the Action Configuration\n\nCreate the file `.github/workflows/workflow.yml`\n\n\n<a id=\"org9bc8afb\"></a>\n\n### Checking for Tag\n\nThis method simply builds and tests the package on any commit.\n\nThen if it finds a tag starting with **v**, it will trigger a deploy.\n\nSo if a [GitHub Release](https://help.github.com/en/articles/creating-releases) is created with the tag **v2.3.4**, it will trigger a deploy.\n\nThis is a bit naive however for my purposes I usually don't tag unless its a release.\n\nOne advantage of checking for a tag this way is that it cuts down on unneeded builds as a whole build can only ever run 1 or 2 times (2 in the case a build is deployed).\n\nThe [GitHub Actions](https://github.com/features/actions) docs mentions being able to [restrict actions](https://help.github.com/en/articles/workflow-syntax-for-github-actions#example-restricting-the-workflow-run-to-specific-refs-and-paths) to certain branches or tags however I could not get this to work.\n\n```yaml\nname: build # Name Action Build\n\non: [push]  # Trigger on push\n\njobs:\n  run:\n    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image\n    steps:\n    - name: Checkout Repo                          # Checkout repo\n      uses: actions/checkout@v1\n    - name: Use Node.js                            # Configure Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.9'                       # Set Node.js Version\n        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry\n    - name: Deploy Info                            # Print GitHub Deploy info\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: echo \"$GITHUB_CONTEXT\"\n    - name: Install                                # Install dependancies\n      run: npm install\n    - name: Build                                  # Build app if needed\n      run: npm run build --if-present\n    - name: Test\n      run: npm run test --if-present               # Run tests if needed\n    - name: Publish\n      if: startsWith(github.ref, 'refs/tags/v')    # Check if publish step should run\n      run: npm publish --access public             # Publish package\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets\n```\n\n\n<a id=\"org2d248b4\"></a>\n\n### Checking for a Release\n\nIf you found the previous method too naive, you may want to check for a [GitHub Release](https://help.github.com/en/articles/creating-releases) before triggering a deploy.\n\nThe drawback to this is that a few extraneous builds will be triggered as the `release` event will fire both when the release is `created` and `published`.  As far as I am aware this can not be restricted using the `on` property.\n\nTo ensure we only deploy once, we will indicate to only run the **Publish** step when a release is `published`.\n\n```yaml\nname: build\n\non:\n  push:     # Run build on push (commit in most cases)\n    tag: [] # Only run build if not tagged\n  release:  # Run build on release\n    tag:\n    - v*    # Check for release tag\n\njobs:\n  run:\n    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image\n    steps:\n    - name: Checkout Repo                          # Checkout repo\n      uses: actions/checkout@v1\n    - name: Use Node.js                            # Configure Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.9'                       # Set Node.js Version\n        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry\n    - name: Deploy Info                            # Print GitHub Deploy info\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: echo \"$GITHUB_CONTEXT\"\n    - name: Install                                # Install dependancies\n      run: npm install\n    - name: Build                                  # Build app if needed\n      run: npm run build --if-present\n    - name: Test\n      run: npm run test --if-present               # Run tests if needed\n    - name: Publish\n      if: github.event_name == 'release' && github.event.action == 'published' # Check if publish step should run\n      run: npm publish --access public             # Publish package\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets\n```\n\n\n<a id=\"org515fedd\"></a>\n\n## Setting NPM Auth Token Secret\n\nSimply go to your repo **Settings** and select the **Secrets** tab.\n\nThen **Add a new secret** with the **Name** of `NPM_AUTH_TOKEN` and set the **Value** to your [NPM token](https://docs.npmjs.com/creating-and-viewing-authentication-tokens).\n\n\n<a id=\"org5d470fc\"></a>\n\n## Adding the GitHub Actions badge\n\n[GitHub](http://github.com) now offers an undocumented API which will return nice [Travis CI](https://travis-ci.org/) like status badge.\n\nAn example can be seen on the [actions/toolkit](https://github.com/actions/toolkit) repo.\n\nThe format for the API is as follows:\n\n```markdown\nhttps://github.com/<user|org>/<repo>/<action_name>/badge.svg\n```\n\nThe `action_name` propery is the `name` field in the [YAML](https://yaml.org/) which in this case is `build`.\n\nAn example of this would be:\n\n```markdown\nhttps://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg\n```\n\nTo make it even nicer we can link the badge to our repo's actions page:\n\n```markdown\n[![img](https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg)](https://github.com/woofers/ludum-dare-badges/actions)\n```\n\nIt will look something like this:\n\n[![img](https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg)](https://github.com/woofers/ludum-dare-badges/actions)\n","post":"yaml-github-actions"},"title":"NPM package deployment using YAML GitHub Actions"},"__N_SSG":true}