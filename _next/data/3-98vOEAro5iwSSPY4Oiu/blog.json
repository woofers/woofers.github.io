{"pageProps":{"data":[{"content":"---\nlayout: post\ntitle: Using Anchors in Bitbucket Markdown Documents\ndate: 2018-10-23\n---\n\n# Using Anchors in Bitbucket Markdown Documents\n\nUsing [Markdown](https://daringfireball.net/projects/markdown/syntax) to write content is a joy; gone are the days of clunky and [slow word processors](https://support.microsoft.com/en-ca/help/918793/how-to-optimize-word-2007-and-word-2010).  Leveraging *HTML* tags for complete control over your document when needed and falling back to a simple and constant syntax for simpler operations works great.  Most [VCS](https://en.wikipedia.org/wiki/Version_control) hosting platforms will recognize the extension and render it. For larger documents typically organizing sections using a table of contents with anchors is an easy and streamlined process.\n\n\n<a id=\"org5d8e85b\"></a>\n\n## Leveraging HTML Anchors\n\nIn most documents I find myself doing something like this:\n\n```markdown\n# Table of Contents\n\n- [Battle Snake 2019](#orgf9ab559)\n    -   [Strategy](#org889b147)\n        -   [Drawbacks](#orgfb85c54)\n    -   [Battle History](#orgcfa9a90)\n    -   [Screenshots](#orgc2991ca)\n    -   [Usage](#org7bfc615)\n        -   [Prerequisites](#orge6d4f36)\n        -   [Test Server](#orgf8ef52a)\n        -   [Run Locally](#org73d091b)\n        -   [Deployment](#org3a27619)\n    -   [Acknowledgments](#org4a0f7fb)\n```\n\nAnd then later on linking the header to an *HTML* anchor:\n\n```markdown\n<a id=\"org889b147\"></a>\n\n## Strategy\n```\n\nThen any other place you want to refer to a section can be done using that ID:\n\n```markdown\nAnother drawback of our [strategy](#org889b147) was ...\n```\n\nThis renders great in [Github](https://github.com/woofers/battle-snake-2018/blob/master/README.md#table-of-contents) and is done automatically when using [Org mode](https://orgmode.org/)'s Markdown exporter.\n\n\n<a id=\"org2c309d3\"></a>\n\n## This Should Work in Bitbucket Cloud Right?\n\n<h4 style='padding-left: 35px'><i class=\"fas fa-exclamation-triangle\"></i> You would be wrong</h4>\n\nBitbucket Cloud very closely follows [John Gruber](https://daringfireball.net/projects/markdown/syntax)'s original Markdown specification with the exception of *HTML* tags.  Attempting to use *HTML* anchors will simply display the escaped *HTML* along with broken links.\n\n\n<a id=\"org920925d\"></a>\n\n### Why?\n\nStraight from [Atlassian](https://confluence.atlassian.com/bitbucket/readme-content-221449772.html#READMEcontent-ExtensionsandLanguages):\n\n> We don't support arbitrary HTML in Markdown, for example <table> tags.\n\nBitbucket Cloud uses [Python Markdown](https://github.com/Python-Markdown/markdown) to render its Markdown files with the [Safe Mode](https://github.com/Python-Markdown/markdown/blob/b62ddeda02fadcd09def9354eb2ef46a7562a106/docs/reference.md#the-details) option **escape** enabled.  This option simply escapes all *HTML* tags to `plain text`.\n\nThis is inconvenient as it greatly limits the customizability of Bitbucket Markdown documents however it prevents Bitbucket from needing to worry about malicious *HTML* and *scripts* being injected.\n\nI have seen [claims](https://confluence.atlassian.com/bitbucketserver/markdown-syntax-guide-776639995.html#Markdownsyntaxguide-readmeREADMEfiles) that *HTML* tags on the self-hosted Bitbucket Server are enabled however I am not able to confirm this.\n\n\n<a id=\"orgcf677b8\"></a>\n\n## How Does Github Handle It Then?\n\nGithub uses [CommonMarker](https://github.com/gjtorikian/commonmarker) which is a Ruby wrapper of [cmark](https://github.com/commonmark/cmark), a C implementation of the [CommonMark](https://commonmark.org/) spec which whitelists [some HTML tags](https://spec.commonmark.org/0.21/#raw-html).\n\nYou won't be able to [embed Youtube videos](https://stackoverflow.com/a/14945782) however the spec for Github's markup rendering is [documented](https://github.com/github/markup) to a much greater extent than that of Bitbucket.\n\n\n<a id=\"orgfe3586a\"></a>\n\n## Exploiting HTML IDs\n\nWhile there is no solution to allow the use of raw *HTML* in Bitbucket documents, anchors to headers and table of contents can still be displayed in Bitbucket Cloud.\n\n\n<a id=\"orga315bae\"></a>\n\n### Anchors\n\nThis can be done by utilizing the fact that all Markdown headers when rendered in Bitbucket will contain an *HTML ID* in the form:\n\n`markdown-header-[kebab-case-header]`\n\nFor example anchoring to this section in Bitbucket would be done with:\n\n`markdown-header-anchors`\n\nAll **spaces** will be replaced with **hyphens** and all **special characters** (*including dots*) will be **removed**.  The ID will also be all **lower-case**.\n\nLinking to the **strategy** section from our previous example would look like:\n\n```markdown\nAnother drawback of our [strategy](#markdown-header-strategy) was ...\n```\n\nThis is not ideal as it won't work in other Markdown renderers however it does allow the use of anchors for those who plan to display content exclusively in Bitbucket.  An *HTML* anchor tag can't be enterted for compatibility since Bitbucket will render it as plain-text.\n\n\n<a id=\"org3053679\"></a>\n\n### Table of Contents\n\nWhile the above technique of using anchors could be employed to manually generate a table of contents, a better solution does exist.  By simply inserting the TOC directive as follows, a table of contents should be generated in-place:\n\n```markdown\n[TOC]\n```\n\n<a id=\"org574c01b\"></a>\n\n### Why Does This Work?\n\nThe short answer is that the [Bitbucket Wiki](https://confluence.atlassian.com/bitbucket/add-a-table-of-contents-to-a-wiki-221451163.html) documents this directive.  The more in-depth answer is that the Python Markdown extension [TOC](https://github.com/Python-Markdown/markdown/blob/master/docs/extensions/toc.md) is being used.  This means that this solution will only work for any renderers powered by Python Markdown.\n\n\n<a id=\"org154d3d7\"></a>\n\n## Too Much Trouble for Anchors?\n\nFor those who were hoping Markdown would be the one true universal format, **its not there** *yet*.  For now to avoid all of this craziness I would recommend simply using Github.  However if you are really stuck with the Bitbucket ecosystem, *as I am at work*, the following should do the trick.\n","post":"anchors-in-bitbucket"},{"content":"---\nlayout: post\ntitle: NPM package deployment using YAML GitHub Actions\ndate: 2019-08-21\n---\n\n# NPM package deployment using YAML GitHub Actions\n\nRecently [GitHub](http://github.com) announced that [GitHub Actions](https://github.com/features/actions) will be [moving away](https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/) from the original [HCL](https://github.com/hashicorp/hcl) syntax in-favour of a [YAML](https://yaml.org/) format\nsimilar to [Travis CI](https://travis-ci.org/) and [Bitbucket Pipelines](https://bitbucket.org/product/features/pipelines).  This means that [HCL](https://github.com/hashicorp/hcl) style actions will no longer work [after September 30, 2019](https://developer.github.com/actions/).  It is possible to migrate using a [migration script](https://help.github.com/en/articles/migrating-github-actions-from-hcl-syntax-to-yaml-syntax) however in-some cases it may be required to reconfigure.\n\nThis particular issue occurred to me as actions which return a neutral result seem to fail the whole build with the [YAML](https://yaml.org/) format.  This means that using [actions/bin/filter](https://github.com/actions/bin/tree/master/filter/bin) to trigger a deploy would fail the build unless a release tag was found.  With this in mind, reconfiguring my [GitHub Actions](https://github.com/features/actions) seemed like the best choice.\n\n\n<a id=\"orgb58448b\"></a>\n\n## Desired Behaviour\n\nMy particular use of [GitHub Actions](https://github.com/features/actions) is for deploying my small [NPM packages](https://docs.npmjs.com/creating-node-js-modules).\n\nTo keep it simple I wanted the following to occur:\n\n-   Install dependencies, Build and Test package on each commit\n-   Publish package if a release tag was created\n\n\n<a id=\"org521573d\"></a>\n\n## Creating the Action Configuration\n\nCreate the file `.github/workflows/workflow.yml`\n\n\n<a id=\"org9bc8afb\"></a>\n\n### Checking for Tag\n\nThis method simply builds and tests the package on any commit.\n\nThen if it finds a tag starting with **v**, it will trigger a deploy.\n\nSo if a [GitHub Release](https://help.github.com/en/articles/creating-releases) is created with the tag **v2.3.4**, it will trigger a deploy.\n\nThis is a bit naive however for my purposes I usually don't tag unless its a release.\n\nOne advantage of checking for a tag this way is that it cuts down on unneeded builds as a whole build can only ever run 1 or 2 times (2 in the case a build is deployed).\n\nThe [GitHub Actions](https://github.com/features/actions) docs mentions being able to [restrict actions](https://help.github.com/en/articles/workflow-syntax-for-github-actions#example-restricting-the-workflow-run-to-specific-refs-and-paths) to certain branches or tags however I could not get this to work.\n\n```yaml\nname: build # Name Action Build\n\non: [push]  # Trigger on push\n\njobs:\n  run:\n    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image\n    steps:\n    - name: Checkout Repo                          # Checkout repo\n      uses: actions/checkout@v1\n    - name: Use Node.js                            # Configure Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.9'                       # Set Node.js Version\n        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry\n    - name: Deploy Info                            # Print GitHub Deploy info\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: echo \"$GITHUB_CONTEXT\"\n    - name: Install                                # Install dependancies\n      run: npm install\n    - name: Build                                  # Build app if needed\n      run: npm run build --if-present\n    - name: Test\n      run: npm run test --if-present               # Run tests if needed\n    - name: Publish\n      if: startsWith(github.ref, 'refs/tags/v')    # Check if publish step should run\n      run: npm publish --access public             # Publish package\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets\n```\n\n\n<a id=\"org2d248b4\"></a>\n\n### Checking for a Release\n\nIf you found the previous method too naive, you may want to check for a [GitHub Release](https://help.github.com/en/articles/creating-releases) before triggering a deploy.\n\nThe drawback to this is that a few extraneous builds will be triggered as the `release` event will fire both when the release is `created` and `published`.  As far as I am aware this can not be restricted using the `on` property.\n\nTo ensure we only deploy once, we will indicate to only run the **Publish** step when a release is `published`.\n\n```yaml\nname: build\n\non:\n  push:     # Run build on push (commit in most cases)\n    tag: [] # Only run build if not tagged\n  release:  # Run build on release\n    tag:\n    - v*    # Check for release tag\n\njobs:\n  run:\n    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image\n    steps:\n    - name: Checkout Repo                          # Checkout repo\n      uses: actions/checkout@v1\n    - name: Use Node.js                            # Configure Node.js\n      uses: actions/setup-node@v1\n      with:\n        node-version: '12.9'                       # Set Node.js Version\n        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry\n    - name: Deploy Info                            # Print GitHub Deploy info\n      env:\n        GITHUB_CONTEXT: ${{ toJson(github) }}\n      run: echo \"$GITHUB_CONTEXT\"\n    - name: Install                                # Install dependancies\n      run: npm install\n    - name: Build                                  # Build app if needed\n      run: npm run build --if-present\n    - name: Test\n      run: npm run test --if-present               # Run tests if needed\n    - name: Publish\n      if: github.event_name == 'release' && github.event.action == 'published' # Check if publish step should run\n      run: npm publish --access public             # Publish package\n      env:\n        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets\n```\n\n\n<a id=\"org515fedd\"></a>\n\n## Setting NPM Auth Token Secret\n\nSimply go to your repo **Settings** and select the **Secrets** tab.\n\nThen **Add a new secret** with the **Name** of `NPM_AUTH_TOKEN` and set the **Value** to your [NPM token](https://docs.npmjs.com/creating-and-viewing-authentication-tokens).\n\n\n<a id=\"org5d470fc\"></a>\n\n## Adding the GitHub Actions badge\n\n[GitHub](http://github.com) now offers an undocumented API which will return nice [Travis CI](https://travis-ci.org/) like status badge.\n\nAn example can be seen on the [actions/toolkit](https://github.com/actions/toolkit) repo.\n\nThe format for the API is as follows:\n\n```markdown\nhttps://github.com/<user|org>/<repo>/<action_name>/badge.svg\n```\n\nThe `action_name` propery is the `name` field in the [YAML](https://yaml.org/) which in this case is `build`.\n\nAn example of this would be:\n\n```markdown\nhttps://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg\n```\n\nTo make it even nicer we can link the badge to our repo's actions page:\n\n```markdown\n[![img](https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg)](https://github.com/woofers/ludum-dare-badges/actions)\n```\n\nIt will look something like this:\n\n[![img](https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg)](https://github.com/woofers/ludum-dare-badges/actions)\n","post":"yaml-github-actions"}]},"__N_SSG":true}