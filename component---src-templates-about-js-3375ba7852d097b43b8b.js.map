{"version":3,"sources":["webpack:///./src/templates/about.js","webpack:///./src/components/content.js","webpack:///./src/components/og-image.js","webpack:///./src/components/title.js","webpack:///./src/components/page.js","webpack:///./src/components/button.js","webpack:///./src/components/smart-link.js","webpack:///./src/components/profile.js"],"names":["AboutTemplate","render","post","this","props","data","orgContent","site","siteMetadata","social","resume","github","twitter","margins","theme","title","metadata","width","profile","height","href","link","icon","faTwitter","handle","faGithub","name","faScroll","html","hideTitle","Component","withTheme","pageQuery","Content","p","hide","css","small","dangerouslySetInnerHTML","__html","url","OgImage","api","property","content","Title","children","Page","Container","style","align","inline","extraSmall","large","medium","Button","to","defaultProps","Link","activeClassName","partiallyActive","other","siteUrl","paths","allSitePage","nodes","map","node","path","urlNoHttps","replace","urlHttp","includes","test","GenericProfile","profileRadius","src","img","alt","Profile","AboutProfile","shift"],"mappings":"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","file":"component---src-templates-about-js-3375ba7852d097b43b8b.js","sourcesContent":["import React, { Component } from \"react\"\nimport { Content } from '../components/content'\nimport { Page } from '../components/page'\nimport { AboutProfile as Profile } from '../components/profile'\nimport { graphql } from 'gatsby'\nimport { withTheme } from 'emotion-theming'\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome'\nimport { faScroll } from '@fortawesome/free-solid-svg-icons'\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport Button from '../components/button'\n\nclass AboutTemplate extends Component {\n  render() {\n    const post = this.props.data.orgContent\n    const { social, resume } = this.props.data.site.siteMetadata\n    const { github, twitter } = social\n    const { margins } = this.props.theme\n    return (\n      <Page title={post.metadata.title} site={this.props.data.site.siteMetadata.title}>\n        <Profile width={margins.profile} height={margins.profile} >\n          <Button href={twitter.link}><Icon icon={faTwitter}/> {twitter.handle}</Button>\n          <Button href={github.link}><Icon icon={faGithub}/> {github.name}</Button>\n          <Button href={resume}><Icon icon={faScroll}/> Resume</Button>\n        </Profile>\n        <Content html={post.html} hideTitle={true} />\n      </Page>\n    )\n  }\n}\n\nexport default withTheme(AboutTemplate)\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    ...Title\n    ...Social\n    orgContent(fields: {slug: {eq: $slug}}) {\n      ...Content\n    }\n  }\n`\n","import React from 'react'\nimport { css } from '@emotion/core'\n\nexport const Content = p => {\n  const hide = css`\n    div:first-of-type h1 {\n      display: none;\n    }\n  `\n  const org = theme => css`\n    ${p.hideTitle ? hide : ''}\n    div {\n      margin-bottom: ${theme.margins.small};\n      text-align: 'left';\n    }\n  `\n  return (\n    <div css={org}\n       dangerouslySetInnerHTML={{ __html: p.html }} />\n  )\n}\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\nconst size = 300\nconst url = 'https://opengraph.vandoorn.ca'\nconst image = `${url}/jvd.png`\n\nconst OgImage = p => {\n  const api = `${url}/**${p.title}**.png?&md=1&images=${image}&widths=${size}&heights=${size}`\n  return (\n    <Helmet>\n      <meta property=\"og:image\" content={api} />\n    </Helmet>\n  )\n}\n\nexport default OgImage\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport OgImage from './og-image'\n\nconst makeTitle = (title, site) => {\n  if (!title) return site\n  if (!site) return title\n  return `${title} - ${site}`\n}\n\nexport const Title = p => (\n  <div>\n    <Helmet>\n      <meta property=\"og:title\" content={p.title} />\n      <title>{makeTitle(p.title, p.site)}</title>\n    </Helmet>\n    <OgImage title={p.title} />\n    {p.children}\n  </div>\n)\n","import React from 'react'\nimport { Title } from '../components/title'\n\nexport const Page = p => (\n  <Title title={p.title} site={p.site}>\n    <article>\n      {p.children}\n    </article>\n  </Title>\n)\n","import React from 'react'\nimport { css } from '@emotion/core'\nimport Link from './smart-link'\nimport { withTheme } from 'emotion-theming'\n\nconst Container = p => {\n  const style = theme => css`\n    text-align: ${p.align};\n    display: ${p.inline ? 'inline-block' : 'block'};\n    margin-bottom: ${theme.margins.extraSmall};\n    margin-right: ${p.inline ? theme.margins.large : 0};\n    margin-top: ${p.inline ? theme.margins.medium : 0};\n  `\n  if (p.inline) return (<span css={style}>{p.children}</span>)\n  return (<div css={style}>{p.children}</div>)\n}\n\nconst Button = p => (\n  <Container inline={p.inline} align={p.align}>\n    <Link style={p.style} to={p.href}>{p.children}</Link>\n  </Container>\n)\n\nButton.defaultProps = {\n  align: 'right'\n}\n\nexport default withTheme(Button)\n","import React from 'react'\nimport { useStaticQuery, Link as GatsbyLink, graphql } from 'gatsby'\nimport { OutboundLink } from 'gatsby-plugin-google-analytics'\n\n// Since DOM elements <a> cannot receive activeClassName\n// and partiallyActive, destructure the prop here and\n// pass it only to GatsbyLink\n// Adapted from: https://www.gatsbyjs.org/docs/gatsby-link/\nconst Link = ({ children, to, activeClassName, partiallyActive, ...other }) => {\n  const data = useStaticQuery(graphql`{ ...Url, ...Pages }`)\n  let link = to\n\n  // Use relative links for jaxson.vandoorn.ca for local development\n  const { siteUrl } = data.site.siteMetadata\n  const paths = data.allSitePage.nodes.map(node => node.path)\n  const urlNoHttps = siteUrl.replace('https://', '')\n  const urlHttp = siteUrl.replace('https://', 'http://')\n\n  link = to.replace(siteUrl, '').replace(urlHttp, '').replace(urlNoHttps, '')\n  if (!link) link = '/'\n\n  if (!paths.includes(link)) {\n    return (\n      <OutboundLink href={to} {...other}>\n        {children}\n      </OutboundLink>\n    )\n  }\n\n  // Tailor the following test to your environment.\n  // This example assumes that any internal link (intended for Gatsby)\n  // will start with exactly one slash, and that anything else is external.\n  const internal = /^\\/(?!\\/)/.test(link)\n\n  // Use Gatsby Link for internal links, and <a> for others\n  if (internal) {\n    return (\n      <GatsbyLink\n        to={link}\n        activeClassName={activeClassName}\n        partiallyActive={partiallyActive}\n        {...other}\n      >\n        {children}\n      </GatsbyLink>\n    )\n  }\n  return (\n    <a href={link} {...other}>\n      {children}\n    </a>\n  )\n}\n\nexport default Link\n","import React from 'react'\nimport { css } from '@emotion/core'\n\nconst GenericProfile = p => {\n  const photo = theme => css`\n    border-radius: ${theme.margins.profileRadius} !important;\n    max-width: ${theme.margins.profile};\n    max-height: ${theme.margins.profile};\n  `\n  return (\n    <img css={photo} src={p.img} alt={p.alt} />\n  )\n}\n\nexport const Profile = p => (\n  <GenericProfile img=\"https://avatars3.githubusercontent.com/u/7284672?s=460&v=4\"\n                  alt=\"Jaxson Van Doorn\"\n                  {...p} />\n)\n\nexport const AboutProfile = p => {\n  const shift = css`\n    float: right;\n    display: block;\n    @media screen and (max-width: 700px) {\n      float: none;\n      margin: 1em auto !important;\n      text-align: center;\n    }\n  `\n  return <span css={shift}><Profile {...p} />{p.children}</span>\n}\n"],"sourceRoot":""}