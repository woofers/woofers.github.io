#+TITLE: NPM package deployment using YAML GitHub Actions
#+DATE: August 21, 2019

Recently [[http://github.com][GitHub]] announced that [[https://github.com/features/actions][GitHub Actions]] will be [[https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/][moving away]] from the original [[https://github.com/hashicorp/hcl][HCL]] syntax in-favour of a [[https://yaml.org/][YAML]] format
similar to [[https://travis-ci.org/][Travis CI]] and [[https://bitbucket.org/product/features/pipelines][Bitbucket Pipelines]].  This means that [[https://github.com/hashicorp/hcl][HCL]] style actions will no longer work [[https://developer.github.com/actions/][after September 30, 2019]].  It is possible to migrate using a [[https://help.github.com/en/articles/migrating-github-actions-from-hcl-syntax-to-yaml-syntax][migration script]] however in-some cases it may be required to reconfigure.

This particular issue occurred to me as actions which return a neutral result seem to fail the whole build with the [[https://yaml.org/][YAML]] format.  This means that using [[https://github.com/actions/bin/tree/master/filter/bin][actions/bin/filter]] to trigger a deploy would fail the build unless a release tag was found.  With this in mind, reconfiguring my [[https://github.com/features/actions][GitHub Actions]] seemed like the best choice.

** Desired Behaviour

My particular use of [[https://github.com/features/actions][GitHub Actions]] is for deploying my small [[https://docs.npmjs.com/creating-node-js-modules][NPM packages]].

To keep it simple I wanted the following to occur:

- Install dependencies, Build and Test package on each commit
- Publish package if a release tag was created

** Creating the Action Configuration

Create the file ~.github/workflows/workflow.yml~

*** Checking for Tag

This method simply builds and tests the package on any commit.

Then if it finds a tag starting with *v*, it will trigger a deploy.

So if a [[https://help.github.com/en/articles/creating-releases][GitHub Release]] is created with the tag *v2.3.4*, it will trigger a deploy.

This is a bit naive however for my purposes I usually don't tag unless its a release.

One advantage of checking for a tag this way is that it cuts down on unneeded builds as a whole build can only ever run 1 or 2 times (2 in the case a build is deployed).

The [[https://github.com/features/actions][GitHub Actions]] docs mentions being able to [[https://help.github.com/en/articles/workflow-syntax-for-github-actions#example-restricting-the-workflow-run-to-specific-refs-and-paths][restrict actions]] to certain branches or tags however I could not get this to work.

#+BEGIN_SRC yaml
name: build # Name Action Build

on: [push]  # Trigger on push

jobs:
  run:
    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image
    steps:
    - name: Checkout Repo                          # Checkout repo
      uses: actions/checkout@v1
    - name: Use Node.js                            # Configure Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.9'                       # Set Node.js Version
        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry
    - name: Deploy Info                            # Print GitHub Deploy info
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Install                                # Install dependancies
      run: npm install
    - name: Build                                  # Build app if needed
      run: npm run build --if-present
    - name: Test
      run: npm run test --if-present               # Run tests if needed
    - name: Publish
      if: startsWith(github.ref, 'refs/tags/v')    # Check if publish step should run
      run: npm publish --access public             # Publish package
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets
#+END_SRC

*** Checking for a Release

If you found the previous method too naive, you may want to check for a [[https://help.github.com/en/articles/creating-releases][GitHub Release]] before triggering a deploy.

The drawback to this is that a few extraneous builds will be triggered as the ~release~ event will fire both when the release is ~created~ and ~published~.  As far as I am aware this can not be restricted using the ~on~ property.

To ensure we only deploy once, we will indicate to only run the *Publish* step when a release is ~published~.

#+BEGIN_SRC yaml
name: build

on:
  push:     # Run build on push (commit in most cases)
    tag: [] # Only run build if not tagged
  release:  # Run build on release
    tag:
    - v*    # Check for release tag

jobs:
  run:
    runs-on: ubuntu-latest                         # Run on Ubuntu Docker image
    steps:
    - name: Checkout Repo                          # Checkout repo
      uses: actions/checkout@v1
    - name: Use Node.js                            # Configure Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.9'                       # Set Node.js Version
        registry-url: 'https://registry.npmjs.org' # Set Node.js reigistry
    - name: Deploy Info                            # Print GitHub Deploy info
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Install                                # Install dependancies
      run: npm install
    - name: Build                                  # Build app if needed
      run: npm run build --if-present
    - name: Test
      run: npm run test --if-present               # Run tests if needed
    - name: Publish
      if: github.event_name == 'release' && github.event.action == 'published' # Check if publish step should run
      run: npm publish --access public             # Publish package
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # Set NPM auth token from GitHub Secrets
#+END_SRC
** Setting NPM Auth Token Secret

Simply go to your repo *Settings* and select the *Secrets* tab.

Then *Add a new secret* with the *Name* of ~NPM_AUTH_TOKEN~ and set the *Value* to your [[https://docs.npmjs.com/creating-and-viewing-authentication-tokens][NPM token]].
** Adding the GitHub Actions badge

[[http://github.com][GitHub]] now offers an undocumented API which will return nice [[https://travis-ci.org/][Travis CI]] like status badge.

An example can be seen on the [[https://github.com/actions/toolkit][actions/toolkit]] repo.

The format for the API is as follows:

#+BEGIN_SRC bash
https://github.com/<user|org>/<repo>/<action_name>/badge.svg
#+END_SRC

The ~action_name~ propery is the ~name~ field in the [[https://yaml.org/][YAML]] which in this case is ~build~.

An example of this would be:

#+BEGIN_SRC bash
https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg
#+END_SRC

To make it even nicer we can link the badge to our repo's actions page:

#+BEGIN_SRC markdown
[![img](https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg)](https://github.com/woofers/ludum-dare-badges/actions)
#+END_SRC

It will look something like this:

#+BEGIN_EXPORT html
<a style="color: rgba(0,0,0,0)" href="https://github.com/woofers/ludum-dare-badges/actions">
  <img style="border-radius: 0" src="https://github.com/woofers/ludum-dare-badges/workflows/build/badge.svg" alt="GitHub Actions build" />
</a>
#+END_EXPORT
